
# Generated by stc version 0.8.3
# date                    : 2020/12/11 09:51:24
# Turbine version         : 1.2.3
# Input filename          : /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift/workflow.swift
# Output filename         : /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift
# STC home                : /home/giuseppe/swift-t-install/stc
# Turbine home            : /home/giuseppe/swift-t-install/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : false
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift/workflow.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : 
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : /home/giuseppe/Git/swift-t/EQ-JL/src
# stc.stc_home                  : /home/giuseppe/swift-t-install/stc
# stc.turbine.version           : 1.2.3
# stc.turbine_home              : /home/giuseppe/swift-t-install/turbine
# stc.version                   : 0.8.3

# Metadata:

# rpath entries
lappend auto_path "/home/giuseppe/Git/swift-t/EQ-JL/src"
package require turbine 1.2.3
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
    global c:i_1
    turbine::allocate_custom c:i_1 integer 1 1 1 1
    turbine::store_integer ${c:i_1} 1
}


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: void t:4:1 RENAMED [void:__t:4] /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift/workflow.swift:main():64:2
    # Var: $string v:path VALUE_OF [string:path]
    # Var: $string v:module VALUE_OF [string:module]
    # Var: $string v:code:3:1 VALUE_OF [string:code:3]
    lassign [ adlb::multicreate [ list integer 1 1 2 ] ] t:4:1
    turbine::c::log "allocated t:4:1=<${t:4:1}>"
    set v:path [ turbine::argv_get_impl "path" ]
    set v:module [ turbine::argv_get_impl "module" ]
    set v:code:3:1 [ turbine::sprintf_impl "include(\"%s/%s.jl\"); using .%s;" ${v:path} ${v:module} ${v:module} ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "__entry-call_foreign-printf"
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    adlb::put 1 [ turbine::adlb_work_type resident_work ] [ list _void_jl-argwait ${t:4:1} ${v:code:3:1} ] ${tcltmp:prio} 1
}


proc __entry-call_foreign-printf {  } {
    # Var: $void v:t:1:1 VALUE_OF [void:__t:1:1]
    set v:t:1:1 [ turbine::printf_local "SWIFT WORKFLOW STARTING..." ]
}


proc _void_jl-argwait { t:4:1 v:code:3:1 } {
    # Var: $void v:v RENAMED [$void:__v:v]
    julia::eval ${v:code:3:1}
    turbine::make_void [ list ${t:4:1} ] [ list ]
    turbine::rule [ list ${t:4:1} ] "main-chain1 ${t:4:1}"
}


proc main-chain1 { t:4:1 } {
    # Var: int c:i_1 OPT_TEMPORARY
    global c:i_1
    # Var: void t:5:1 RENAMED [void:__t:5] /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift/workflow.swift:main():65:2
    lassign [ adlb::multicreate [ list integer 2 1 3 ] ] t:5:1
    turbine::c::log "allocated t:5:1=<${t:5:1}>"
    turbine::rule [ list ${t:5:1} ] "main-chain2 ${t:5:1}"
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "loop-forloop-1 1 1 ${c:i_1} ${t:5:1}"
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "__entry-call_foreign-printf-5"
    turbine::reset_priority
    turbine::read_refcount_decr ${t:4:1} 1
}


proc main-chain2 { t:5:1 } {
    # Var: $void v:t:7:1 VALUE_OF [void:__t:7:1]
    set v:t:7:1 [ turbine::printf_local "SWIFT WORKFLOW COMPLETE" ]
    turbine::read_refcount_decr ${t:5:1} 1
}


proc loop-forloop-1 { v:xcond:1 v:b u:j t:5:1 } {
    if { ${v:xcond:1} } {
        # Var: boolean u:c RENAMED [boolean:c] /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift/workflow.swift:loop():30:4
        # Var: int t:25 RENAMED [int:__t:25] /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift/workflow.swift:loop():26:18
        lassign [ adlb::multicreate [ list integer 1 1 4 ] [ list integer 1 1 5 ] ] u:c t:25
        turbine::c::log "allocated u:c=<${u:c}> t:25=<${t:25}>"
        turbine::read_refcount_incr ${t:5:1} 1
        set tcltmp:prio [ turbine::get_priority ]
        adlb::put 1 [ turbine::adlb_work_type resident_work ] "_string_jl-argwait ${t:5:1} ${u:c}" ${tcltmp:prio} 1
        turbine::rule [ list ${u:j} ] "__entry-async_op-plus_int ${t:25} ${u:j}"
        turbine::rule [ list ${u:c} ] "__entry-loop_continue ${t:25} ${t:5:1} ${u:c}"
    } else {
        turbine::read_refcount_decr ${u:j} 1
        turbine::read_refcount_decr ${t:5:1} 1
    }
}


proc _string_jl-argwait { t:5:1 u:c } {
    # Var: $string v:output:2 RENAMED [$string:__v:output]
    # Var: $boolean v:t:8:1 VALUE_OF [boolean:__t:8:1]
    set v:output:2 [ julia::eval "result = eqjl.output_get()" ]
    set v:t:8:1 [ string equal ${v:output:2} "FINAL" ]
    if { ${v:t:8:1} } {
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "__entry-call_foreign-printf-1 ${t:5:1} ${u:c}"
        turbine::reset_priority
    } else {
        # Var: $boolean v:t:12 VALUE_OF [boolean:__t:12]
        set v:t:12 [ string equal ${v:output:2} "EQJL_ABORT" ]
        if { ${v:t:12} } {
            set tcltmp:prio [ turbine::get_priority ]
            adlb::put 1 [ turbine::adlb_work_type resident_work ] "_string_jl-argwait-1 ${t:5:1} ${u:c}" ${tcltmp:prio} 1
        } else {
            # Var: string[int] u:results RENAMED [string[int]:results] /home/giuseppe/Git/swift-t/EQ-JL/examples/noop/swift/workflow.swift:loop():45:6
            # Var: $string$[int] v:params VALUE_OF [string[int]:params]
            lassign [ adlb::multicreate [ list container integer string 1 1 6 ] ] u:results
            turbine::c::log "allocated u:results=<${u:results}>"
            set v:params [ turbine::split_impl ${v:output:2} ";" ]
            dict for {v:i v:p} ${v:params} {
                # Var: $int v:t:19 VALUE_OF [int:__t:19]
                # Var: $int v:t:18 VALUE_OF [int:__t:18]
                # Var: $string v:t:17 VALUE_OF [string:__t:17]
                set v:t:19 [ turbine::parse_int_impl ${v:p} 10 ]
                set v:t:18 [ expr { ${v:t:19} + 1 } ]
                set v:t:17 ${v:t:18}
                turbine::container_insert ${u:results} ${v:i} ${v:t:17} string 0
            }
            turbine::rule [ list ${u:results} ] "join-argwait ${u:c} ${u:results}"
            adlb::write_refcount_decr ${u:results} 1
        }
    }
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list __entry-call_foreign-printf-4 ${v:output:2} ]
    turbine::reset_priority
}


proc __entry-call_foreign-printf-1 { t:5:1 u:c } {
    # Var: $void v:t:10 VALUE_OF [void:__t:10]
    set v:t:10 [ turbine::printf_local "Exiting loop." ]
    turbine::make_void [ list ${t:5:1} ] [ list ]
    turbine::store_integer ${u:c} 0
}


proc _string_jl-argwait-1 { t:5:1 u:c } {
    # Var: $string v:output RENAMED [$string:__v:output]
    set v:output [ julia::eval "result = eqjl.output_get()" ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list __entry-call_foreign-printf-2 ${t:5:1} ${v:output} ${u:c} ]
    turbine::reset_priority
}


proc __entry-call_foreign-printf-2 { t:5:1 v:output u:c } {
    # Var: $void v:t:14 VALUE_OF [void:__t:14]
    set v:t:14 [ turbine::printf_local "Abort %s" ${v:output} ]
    turbine::make_void [ list ${t:5:1} ] [ list ]
    turbine::store_integer ${u:c} 0
}


proc join-argwait { u:c u:results } {
    # Var: $string$[int] v:A RENAMED [$string$[int]:__v:A]
    # Var: $string v:s RENAMED [$string:__v:s]
    # Var: $string v:code:1 VALUE_OF [string:code:1]
    set v:A [ turbine::enumerate_rec ${u:results} [ list container string ] 0 1 ]
    set v:s [ turbine::string_join_impl ${v:A} ";" ]
    set v:code:1 [ turbine::sprintf_impl "push!(eqjl.input_q, \"%s\");" ${v:s} ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list __entry-call_foreign-printf-3 ${v:s} ]
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    adlb::put 1 [ turbine::adlb_work_type resident_work ] [ list _string_jl-argwait-2 ${v:code:1} ${u:c} ] ${tcltmp:prio} 1
}


proc __entry-call_foreign-printf-3 { v:s } {
    # Var: $void v:t:22 VALUE_OF [void:__t:22]
    set v:t:22 [ turbine::printf_local "swift: to EQJL:   %s" ${v:s} ]
}


proc _string_jl-argwait-2 { v:code:1 u:c } {
    # Var: $string v:output:1 RENAMED [$string:__v:output]
    set v:output:1 [ julia::eval ${v:code:1} ]
    turbine::store_integer ${u:c} 1
}


proc __entry-call_foreign-printf-4 { v:output:2 } {
    # Var: $void v:t:6:2 VALUE_OF [void:__t:6:2]
    set v:t:6:2 [ turbine::printf_local "swift: from EQJL: %s" ${v:output:2} ]
}


proc __entry-async_op-plus_int { t:25 u:j } {
    # Var: $int v:j VALUE_OF [int:j]
    # Var: $int v:t:25 VALUE_OF [int:__t:25]
    set v:j [ turbine::retrieve_integer ${u:j} CACHED 1 ]
    set v:t:25 [ expr { ${v:j} + 1 } ]
    turbine::store_integer ${t:25} ${v:t:25}
}


proc __entry-loop_continue { t:25 t:5:1 u:c } {
    # Var: $boolean v:c:1 VALUE_OF [boolean:c]
    set v:c:1 [ turbine::retrieve_integer ${u:c} CACHED 1 ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "loop-forloop-1 ${v:c:1} ${v:c:1} ${t:25} ${t:5:1}"
    turbine::reset_priority
    turbine::read_refcount_decr ${t:5:1} 1
}


proc __entry-call_foreign-printf-5 {  } {
    # Var: $void v:t:1:2 VALUE_OF [void:__t:1:2]
    set v:t:1:2 [ turbine::printf_local "Entering loop..." ]
}

turbine::defaults
turbine::declare_custom_work_types COASTER resident_work
turbine::init $servers "Swift"
turbine::check_can_execute resident_work
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
adlb::add_debug_symbol 1 "__c:i_1" ""
adlb::add_debug_symbol 2 "__t:4:1" "workflow:main():64:2"
adlb::add_debug_symbol 3 "__t:5:1" "workflow:main():65:2"
adlb::add_debug_symbol 4 "c" "workflow:loop():30:4"
adlb::add_debug_symbol 5 "__t:25" "workflow:loop():26:18"
adlb::add_debug_symbol 6 "results" "workflow:loop():45:6"
turbine::start swift:main swift:constants
turbine::finalize
